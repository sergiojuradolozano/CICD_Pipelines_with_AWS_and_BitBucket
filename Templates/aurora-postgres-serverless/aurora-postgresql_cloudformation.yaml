AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::SecretsManager-2020-07-23
Description: Deployment of Aurora PostgreSQL
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - uat
      - prod
    Description: Enter dev, uat or prod. Default is dev
  Region:
    Type: String
    Default: us-east-1
    AllowedValues:
      - us-east-1
    Description: This value will be replace by the value of the TemplateConfiguration file. The Region from the cli script need to be on the allowed values list.
  DbMasterUser:
    Type: String
    Default: admin
    Description: db master user
  Network:
    Type: String
    Default: 10.160
    Description: This value will be replace by the value of the TemplateConfiguration file
  DbEngine:
    Type: String
    Default: aurora-postgresql-14.6
    Description: "Aurora engine and version"
  DbSnapshotIdentifier:
    Description: 'Optional identifier for the DB cluster snapshot from which you want to restore (leave blank to create an empty cluster).'
    Type: String
    Default: ''
  DbInstanceClass:
    Description: 'The instance type of database server (see https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html).'
    Type: String
    Default: db.serverless
  DbBackupRetentionPeriod:
    Description: 'The number of days to keep snapshots of the cluster.'
    Type: Number
    MinValue: 1
    MaxValue: 35
    Default: 30

Mappings:
  DatabaseNameMap:
    dev:
      name: dev
    uat:
      name: uat
    prod:
      name: prod
  DatabaseMasterUserNameMap:
    dev:
      name: admindev
    uat:
      name: adminuat
    prod:
      name: adminprod
  EngineMap:
    aurora-postgresql-14.6:
      Engine: 'aurora-postgresql'
      EngineVersion: '14.6'
      Port: 5432
      ClusterParameterGroupFamily: 'aurora-postgresql14'
      ParameterGroupFamily: 'aurora-postgresql14'

Conditions:
  isProd: !Equals  [!Ref Environment, prod]
  isDev: !Equals  [!Ref Environment, dev]

Resources:
  AuroraPostgresqlRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}admin-database-credentials"
      Description: Aurora PostgreSQL database credentials
      GenerateSecretString:
        SecretStringTemplate: !Join ['', ['{"username": "', !FindInMap [DatabaseMasterUserNameMap, !Ref Environment, name], '"}' ]]
        GenerateStringKey: "password"
        PasswordLength: 20
        ExcludeCharacters: '"@/\'

  AuroraPostgresqlSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraPostgresqlRotationSecret
      TargetId: !Ref AuroraPostgresqlCluster
      TargetType: AWS::RDS::DBCluster

  AuroraPostgresqlRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: AuroraPostgresqlSecretAttachment
    Properties:
      SecretId: !Ref AuroraPostgresqlRotationSecret
      HostedRotationLambda:
        RotationType: "PostgreSQLSingleUser"
        RotationLambdaName: !Sub "${Environment}-SecretsManagerRotation"
        VpcSecurityGroupIds: !Ref AuroraPostgresqlSecurityGroup
        VpcSubnetIds:
          Fn::Join:
            - ","
            - - Fn::ImportValue:
                  !Sub "${Environment}InternalSubnet-${Region}a"
              - Fn::ImportValue:
                  !Sub "${Environment}InternalSubnet-${Region}b"
      RotationRules:
        AutomaticallyAfterDays: 30

  AuroraPostgresqlParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      DBParameterGroupName: 'default-aurora-postgresql14'
      Description: !Ref 'AWS::StackName'
      Family: !FindInMap [ EngineMap, !Ref DbEngine, ClusterParameterGroupFamily ]
      Parameters:
        apg_plan_mgmt.capture_plan_baselines: "off"
        apg_plan_mgmt.max_databases: 10
        apg_plan_mgmt.max_plans: 1000
        apg_plan_mgmt.plan_retention_period: 32
        apg_plan_mgmt.unapproved_plan_execution_threshold: 0
        apg_plan_mgmt.use_plan_baselines: false

  AuroraPostgresqlClusterParameterGroup:
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: !FindInMap [ EngineMap, !Ref DbEngine, ClusterParameterGroupFamily ]
      Parameters:
        apg_plan_mgmt.capture_plan_baselines: "off"
        apg_plan_mgmt.max_databases: 10
        apg_plan_mgmt.max_plans: 1000
        apg_plan_mgmt.plan_retention_period: 32
        apg_plan_mgmt.unapproved_plan_execution_threshold: 0
        apg_plan_mgmt.use_plan_baselines: false

  AuroraPostgresqlCluster:
    Type: AWS::RDS::DBCluster
    DependsOn: AuroraPostgresqlClusterParameterGroup
    Description:  aurora postgres cluster
    Properties:
      EnableHttpEndpoint: !If [isProd, false, true]
      DBClusterIdentifier: !Sub "${Environment}-aurora-postgresql-serverless-db-cluster"
      Engine: aurora-postgresql
      AvailabilityZones:
        - us-east-1a
        - us-east-1b
      EngineVersion: 14.6
      Port: 5432
      BackupRetentionPeriod: !If [isProd, 35, 2]
      VpcSecurityGroupIds: [!Ref AuroraPostgresqlSecurityGroup]
      DatabaseName: !FindInMap [DatabaseNameMap, !Ref Environment, name]
      DBClusterParameterGroupName: !Ref AuroraPostgresqlClusterParameterGroup
      DBSubnetGroupName: !Ref DbSubNetGroup
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraPostgresqlRotationSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref AuroraPostgresqlRotationSecret, ':SecretString:password}}' ]]
      ServerlessV2ScalingConfiguration:
        MinCapacity: !If [isProd, 8, 4]
        MaxCapacity: !If [isProd, 32, 16]

  DBInstanceA:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Ref AuroraPostgresqlCluster
      MultiAZ: true
      DBInstanceClass: !Ref DbInstanceClass
      DBParameterGroupName: !Ref AuroraPostgresqlParameterGroup
      DBInstanceIdentifier: !Sub ${Environment}-aurora-postgres-a
      DBSubnetGroupName: !Ref DbSubNetGroup
      Engine: !FindInMap [ EngineMap, !Ref DbEngine, Engine ]

  DBInstanceB:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBClusterIdentifier: !Ref AuroraPostgresqlCluster
      DBInstanceClass: !Ref DbInstanceClass
      DBParameterGroupName: !Ref AuroraPostgresqlParameterGroup
      DBInstanceIdentifier: !Sub ${Environment}-aurora-postgres-b
      DBSubnetGroupName: !Ref DbSubNetGroup
      Engine: !FindInMap [ EngineMap, !Ref DbEngine, Engine ]

  AuroraPostgresqlSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Description: Internal network access to rds database
    Properties:
      GroupDescription: Internal network access to rds database
      VpcId:
        Fn::ImportValue:
          !Sub "${Environment}VPC-${AWS::Region}"
      GroupName: !Sub "${Environment}-services-vpc-rds-access"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Sub ${Network}.0.0/16
      Tags:
        - Key: "Name"
          Value: "Internal network access to rds database"

  AuroraRdsIngressSelfReference:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: AuroraPostgresqlSecurityGroup
    Properties:
      GroupId: !Ref AuroraPostgresqlSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref AuroraPostgresqlSecurityGroup

  DbSubNetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${Environment}InternalSubnet-${Region}a"
        - Fn::ImportValue:
            !Sub "${Environment}InternalSubnet-${Region}b"
      DBSubnetGroupDescription: serverless cluster subnet group
      DBSubnetGroupName: !Sub "${Environment}-rds-serverless-subnet-group"


